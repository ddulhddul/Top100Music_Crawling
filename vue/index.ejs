<!DOCTYPE html>
<html lang="en" style="text-align:center;">

<head>
  <title>Vue) Music Top 100 Youtube</title>
  <meta charset="UTF-8" name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" type="text/css" href="/css/bootstrap.min.css">
  <link rel="stylesheet" type="text/css" href="/css/style.css">
  <script src="http://www.youtube.com/player_api"></script>
  <script src="/js/vue.js"></script>
</head>

<body>
  <div id=contentBody align=center>
    <div class="iframeDiv">
      <h4 style="cursor:pointer;">
        <strong>{{ currentMusic.song }}</strong>
        <span style="white-space: nowrap">
          <small>&nbsp;&nbsp;{{ currentMusic.singer }}</small>
        </span>
      </h4>
      <div id="playerEmbedDiv" v-bind:style='{display: videoHidden? "none": "block"}' class="embed-responsive embed-responsive-4by3">
        <div id="player" class="embed-responsive-item"></div>
      </div>
      <div style="text-align:right; margin:5px 0px -10px 0px;">
        <button id="playerHiddenBtn" v-on:click='videoHidden=!videoHidden' class="btn btn-dark btn-xs">hidden</button>
      </div>
      <div role="group" class="btn-group" style='display:none;'>
        <button type="button" data-role="toggle-message-sidebar" class="btn btn-success">
          <span aria-hidden="true" class="glyphicon glyphicon-comment"></span>
        </button>
      </div>
      <div id="btnGroup" role="group" class="btn-group">
        <button type="button" v-on:click="playType='1'" v-bind:class='playType == "1" ? "btn-info" : ""' style="font-weight:bold;"
          class="btn btn-default">1</button>
        <button type="button" v-on:click="playType='s'" v-bind:class='playType == "s" ? "btn-info" : ""' class="btn btn-default">
          <span aria-hidden="true" class="glyphicon glyphicon-retweet"></span>
        </button>
        <button type="button" v-on:click="playType='r'" v-bind:class='playType == "r" ? "btn-info" : ""' class="btn btn-default">
          <span aria-hidden="true" class="glyphicon glyphicon-random"></span>
        </button>
      </div>
      <div role="group" class="btn-group">
        <button type="button" v-on:click="pauseYoutube()" class="btn btn-warning">
          <span aria-hidden="true" class="glyphicon glyphicon-pause"></span>
        </button>
        <button type="button" v-on:click="playYoutube()" class="btn btn-primary">
          <span aria-hidden="true" class="glyphicon glyphicon-play"></span>
        </button>
        <button type="button" v-on:click="nextSong()" class="btn btn-danger">
          <span aria-hidden="true" class="glyphicon glyphicon-forward"></span>
        </button>
      </div>
    </div>
    <div class="content" style="margin-top:10px;">
      <ul class="nav nav-tabs">
        <li v-bind:class="tab=='song'?'active':''"><a href="#none" @click="tab='song'">Song</a></li>
        <li v-bind:class="tab=='message'?'active':''"><a href="#none" @click="tab='message'">Messages</a></li>
      </ul>
    </div>
    <!-- Message Tab -->
    <!-- v-bind:hidden="tab=='message' ? false : true" class="content"> -->
    <div v-if="tab=='message'" id="messageDiv" class="content">
      <message-component></message-component>
    </div>
    <!-- Song Tab -->
    <div v-if="tab=='song'" class="content">
      <div class="row">
        <div class="col-xs-2 btn-group btn-group-xs" style="display:grid;">
          <button v-bind:class='selectSongMode?"btn-link":"btn-success"' class="btn" @click="selectSongMode=!selectSongMode">Select</button>
        </div>
        <div class="col-xs-8 btn-group btn-group-xs" style="display:grid;">
          <b>{{ (currentMusic.yymmddhh || '').replace(/(.{4})(.{2})(.{2})(.{2})/,'$1-$2-$3 $4:00') }}</b>
        </div>
        <div class="col-xs-2 btn-group btn-group-xs" style="display:grid;">
          <!-- <button class="btn btn-default">Right</button> -->
        </div>
      </div>
      <div v-if="selectSongMode" class="btn-group btn-group-xs">
        <button v-if="removedSingerList.length" style="margin:0px 2px 1px 2px" @click="removedSingerList=[]" class="btn btn-success">reset</button>
        <button v-for="singer in removedSingerList" @click="unremoveSinger(singer)" class="btn btn-dark" style="margin:0px 2px 1px 2px">{{singer}}</button>
      </div>
      <table id="listDiv" class="table table-striped table-hover listTable">
        <colgroup>
          <col v-if="false"></col>
          <col width='10%'></col>
          <col width='40%'></col>
          <col width='40%'></col>
          <col v-if="selectSongMode"></col>
        </colgroup>
        <thead>
          <tr>
            <td v-if="false"><input type=checkbox v-on:click="allCheck()" v-bind:checked="selectAll" /></td>
            <th>#</th>
            <th>song</th>
            <th>singer</th>
            <th v-if="selectSongMode">
              <div class="col-xs-2 btn-group btn-group-xs">
                <button @click="removeAllSinger()" class="btn btn-danger">
                  <span aria-hidden="true" class="glyphicon glyphicon-remove"></span> all
                </button>
              </div>
            </th>
          </tr>
        </thead>
        <tbody>
          <tr v-bind:id="music.num" 
            v-for="(music,index) in musicList" 
            v-if="!removedSingerList.contains(music.singer)"
            v-bind:class='currentMusic.num == music.num ? "success" : ""'
            v-bind:style='music.checked ? "" : "text-decoration:line-through;"'
            >
            <td v-if="false"><input type=checkbox v-bind:checked="music.checked" v-on:click="music.checked=!music.checked;allCheckChk()" /></td>
            <td v-on:click="changeMusic(music)">{{ music.num }}</td>
            <td v-on:click="changeMusic(music)">{{ music.song }}</td>
            <td v-on:click="changeMusic(music)">{{ music.singer }}</td>
            <td v-if="selectSongMode">
              <div class="col-xs-2 btn-group btn-group-xs">
                <button @click="removeSinger(music)" class="btn btn-danger">
                  <span aria-hidden="true" class="glyphicon glyphicon-remove"></span> singer
                </button>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <footer>
      <p>
        <strong onclick="window.open('https://github.com/ddulhddul/Top100Music_Crawling')">ddulh</strong>
        <small>ddulhddul@gmail.com</small>
        <span>contributed by
          <b onclick="window.open('https://github.com/Kitchu0401')">kitchu</b>
        </span>
      </p>
    </footer>
  </div>
  <script src="js/message.js" type="text/javascript"></script>
  <script>
    if(Array.contains === undefined) Array.prototype.contains = function (element) {
      for (var i = 0; i < this.length; i++) {
          if (this[i] == element) {
              return true;
          }
      }
      return false;
    }
    NodeList.prototype.forEach = NodeList.prototype.forEach || Array.prototype.forEach;

    var ML_CHART = new Vue({
      el: '#contentBody',
      data: {
        tab: 'song', //song,message
        playType: 's',
        selectSongMode: false,
        videoHidden: true,
        musicList: [],
        currentMusic: {},
        totNum: 100,
        selectAll: true,
        removedSingerList: []
      },
      created: function () {
        (async () => {
          const response = await fetch('song/list');
          const body = await response.json();
          if (response.status !== 200) throw Error(body.message);
          return body;
        })()
          .then(res => {
            console.log('result', res)
            this.musicList = res.result;
            this.musicList = this.musicList.map(function(value,index,array){
              value.checked = ML_CHART.selectAll; return value;
            })
            this.changeMusic(res.result[0])
          })
          .catch(err => console.log(err));
      },
      methods: {
        removeAllSinger: function(){
          var singerList = []
          this.musicList.filter(function(value,index,array){
            if(!ML_CHART.removedSingerList.contains(value.singer) 
                && !singerList.contains(value.singer)){
              ML_CHART.removeSinger({singer:value.singer})
              singerList.push(value.singer)
            }
          })
        },
        unremoveSinger: function(singer){
          this.removedSingerList = this.removedSingerList.filter(function(value){
            return value != singer
          })
        },
        removeSinger: function(obj){
          this.removedSingerList.push(obj.singer)
          this.removedSingerList.sort()
        },
        allCheck: function(target){
          this.selectAll 
          ? this.musicList = this.musicList.map(function(value,index,array){
              value.checked = false; return value;
            })
          : this.musicList = this.musicList.map(function(value,index,array){
              value.checked = true; return value;
            })
          this.selectAll = !this.selectAll
        },
        allCheckChk: function(){
          this.selectAll = this.musicList.length == this.musicList.filter(function(value,index,array){
            return value.checked
          }).length
        },
        pauseYoutube: function () {
          if (player) player.pauseVideo();
        },
        playYoutube: function () {
          if (player) player.playVideo();
        },
        nextSong: function () {

          var curList = ML_CHART.musicList.filter(function(obj){
            return !ML_CHART.removedSingerList.contains(obj.singer)
          })
          var nextSongNum = ML_CHART.currentMusic.num
          if(curList.length){
            if (ML_CHART.playType === 'r'){
              //remove self
              curList = curList.filter(function(obj){
                return obj.num != ML_CHART.currentMusic.num
              })
              nextSongNum = (curList[Math.floor((Math.random() * curList.length))] || ML_CHART.currentMusic).num

            } else if (ML_CHART.playType === 's'){
              for (let index = 0; index < curList.length; index++) {
                const element = curList[index];
                if(element.num == ML_CHART.currentMusic.num){
                  nextSongNum = (curList[index+1] || curList[0]).num
                }
              } 
            }
          }

          ML_CHART.changeMusic(ML_CHART.musicList.find(function (obj, index) {
            return obj.num == nextSongNum
          }))
        },
        changeMusic: function (data) {
          if (data.videoId) {
            ML_CHART.updatePlayList(data)
            return;
          }
          fetch(`song/change?yymmddhh=${data.yymmddhh}&num=${data.num}`)
            .then(res => res.json())
            .then(result => {
              var targetObj = {}
              ML_CHART.musicList = ML_CHART.musicList.map(function (obj, index, array) {
                if (obj.num === data.num) {
                  obj.videoId = result.url
                  targetObj = obj
                }
                return obj
              })
              ML_CHART.updatePlayList(targetObj)
            })
        },
        updatePlayList: function (obj) {
          ML_CHART.currentMusic = obj;
          if (player && player.cuePlaylist) {
            player.cuePlaylist([obj.videoId])
            ML_CHART.setVideoTitleAndPlay(obj)
          }
        },
        setVideoTitleAndPlay: function (obj) {
          if (obj.singer && obj.song) {
            document.title = `${obj.singer} - ${obj.song}`
          }
          if (document.getElementById(obj.num)) document.getElementById('listDiv').scrollTop = document.getElementById(obj.num).offsetTop
        },
        playVideoCustom: function () {
          player.playVideo()
          // 플레이하지 않는 경우 방지, 5초후 다시 실행
          setTimeout(function () {
            player && player.getPlayerState() != 1 && player.playVideo()
          }, 5000);
        }
      }
    })

    /*****************************
     * Create youtube player
    *****************************/
    var player;
    // videoId : 공유URL(http://youtu.be/UaY9xbHmVAc)에서 'http://youtu.be'만 제거한 아이디
    // playerVars : autoplay-자동시작, controls-하단컨트롤 사용여부, html5-html5 사용여부
    function onYouTubePlayerAPIReady() {
      player = new YT.Player('player', {
        height: '100%',
        width: '100%',
        videoId: '',
        playerVars: { 'autoplay': 1, 'controls': 1, 'html5': 1 },
        events: {
          'onReady': function (event) {
            if (ML_CHART.musicList.length) ML_CHART.changeMusic(ML_CHART.musicList[0])

          },
          'onStateChange': function (event) {
            if (event.data === 5) {
              ML_CHART.playVideoCustom()

            } else if (event.data === 0) {
              //동영상 끝난 후 이벤트
              ML_CHART.nextSong()

            } else if (event.data === -1) ML_CHART.playVideoCustom()

          },
          'onError': function (event) {
            if (ML_CHART.videoHidden) ML_CHART.nextSong();
          }
        }
      });
    }
  </script>
</body>

</html>